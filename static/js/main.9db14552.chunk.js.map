{"version":3,"sources":["components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contact-actions.js","redux/contact-reducer.js","redux/contact-store.js","components/Container/Container.js","components/Section/Section.js","redux/contact-selectors.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactForm.container.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/Filter/Filter.js","components/Filter/Filter.container.js","App.js","index.js"],"names":["module","exports","addContact","createAction","deleteContact","changeFilter","items","createReducer","actions","state","payload","filter","id","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","contactReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","Container","children","className","styles","Section","title","getVisibleContacts","allContacts","normalizeFilter","toLowerCase","contact","name","includes","ContactForm","number","handleChange","event","currentTarget","value","setState","handleFormFill","contactId","shortid","generate","reviewExistingContactsNames","props","existingContactsName","emptyForm","shortContactName","length","alert","onSubmit","reset","handleSubmit","preventDefault","this","form","htmlFor","nameInputId","formLabel","type","onChange","formInput","numberInputId","btn","Component","connect","map","dispatch","data","contactsActions","ContactListItem","onDeleteContact","item","onClick","ContactList","contacts","list","Filter","input","target","App","ReactDOM","render","StrictMode","contactStore","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9db14552.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3MtRK\",\"btn\":\"ContactListItem_btn__2B8bS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__eLsmm\",\"input\":\"Filter_input__2uLAY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1zhO5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__t1jFp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2iDFu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__iwafZ\",\"formLabel\":\"ContactForm_formLabel__2iZ03\",\"formInput\":\"ContactForm_formInput__1DPYk\",\"btn\":\"ContactForm_btn__2xOgg\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/addContact');\r\nconst deleteContact = createAction('contacts/deleteContact');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  changeFilter,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './contact-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2 className={styles.title}>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","export const getExistingContactsName = allContacts => {\r\n  return allContacts.map(contact => contact.name.toLowerCase());\r\n};\r\n\r\nexport const getVisibleContacts = (allContacts, filter) => {\r\n  const normalizeFilter = filter.toLowerCase();\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizeFilter),\r\n  );\r\n};\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport shortid from 'shortid';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    existingContactsName: PropTypes.array.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleFormFill = () => {\n    const contactId = shortid.generate();\n    const { name, number } = this.state;\n    const { existingContactsName } = this.props;\n    const reviewExistingContactsNames = existingContactsName.includes(\n      name.toLowerCase(),\n    );\n    const emptyForm = !name || !number;\n    const shortContactName = name.length < 3;\n\n    if (reviewExistingContactsNames) {\n      return alert(`${name} is already in contacts`);\n    }\n    if (emptyForm) {\n      return alert('Fill the form');\n    }\n    if (shortContactName) {\n      return alert('Name should have more than 3 letters');\n    }\n\n    this.props.onSubmit({\n      name,\n      number,\n      id: contactId,\n    });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.handleFormFill();\n    this.reset();\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label htmlFor={this.nameInputId} className={styles.formLabel}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            className={styles.formInput}\n          />\n        </label>\n        <br />\n        <label htmlFor={this.numberInputId} className={styles.formLabel}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            className={styles.formInput}\n          />\n        </label>\n        <button type=\"submit\" className={styles.btn}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contact-actions';\r\nimport { getExistingContactsName } from '../../redux/contact-selectors';\r\nimport ContactForm from './ContactForm';\r\n\r\n\r\nconst mapStateProps = ({ items }) => ({\r\n  existingContactsName: getExistingContactsName(items),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch(contactsActions.addContact(data)),\r\n});\r\n\r\nexport default connect(mapStateProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contact, onDeleteContact }) => {\n  const { name, number } = contact;\n\n  return (\n    <li className={styles.item}>\n      <span>{name}:</span>\n      <span> {number}</span>\n      <button type=\"button\" onClick={onDeleteContact} className={styles.btn}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.exact({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactlistItem from '../ContactListItem';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, ...contact }) => {\n        return (\n          <ContactlistItem\n            key={id}\n            contact={contact}\n            onDeleteContact={() => deleteContact(id)}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contact-actions';\r\nimport { getVisibleContacts } from '../../redux/contact-selectors';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateProps = ({ items, filter }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\nexport default connect(mapStateProps, mapDispatchProps)(ContactList);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3 className={styles.title}>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n      className={styles.input}\n    />\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contact-actions';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.filter,\r\n});\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Filter);\r\n","import React, { Component } from 'react';\nimport Container from './components/Container';\nimport Section from './components/Section';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Section title=\"Phonebook\">\n          <ContactForm />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter />\n          <ContactList />\n        </Section>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// Модули\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport contactStore from './redux/contact-store';\n\n// Компоненты\nimport App from './App';\n// Стили\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={contactStore.store}>\n      <PersistGate loading={'loading'} persistor={contactStore.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}